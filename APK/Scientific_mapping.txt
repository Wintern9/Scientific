# compiler: R8
# compiler_version: 3.1.66
# min_api: 23
# pg_map_id: 45ca257
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"1.0"}
bitter.jnibridge.JNIBridge$a -> bitter.jnibridge.JNIBridge$a:
    java.lang.Object -$$Nest$fgeta(bitter.jnibridge.JNIBridge$a) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputb(bitter.jnibridge.JNIBridge$a,long) -> b
      # {"id":"com.android.tools.r8.synthesized"}
com.samsung.android.gamesdk.GameSDKManager -> a.a:
    int[] mEmptyIntArrary -> d
    com.samsung.android.gamesdk.IGameSDKService mService -> a
    float mServiceVersion -> c
    com.samsung.android.gamesdk.GameSDKManager$Listener mListener -> b
    java.lang.String getVersion() -> a
    boolean setCpuBoostMode(int) -> b
    boolean setGpuBoostMode(int) -> c
    void updateServiceVersion() -> d
com.samsung.android.gamesdk.GameSDKManager$Listener -> a.a$a:
com.unity.androidnotifications.NotificationChannelWrapper -> com.unity.androidnotifications.a:
    int lockscreenVisibility -> j
    java.lang.String group -> k
    boolean enableLights -> e
    boolean enableVibration -> f
    java.lang.String id -> a
    boolean canBypassDnd -> g
    boolean canShowBadge -> h
    java.lang.String name -> b
    int importance -> c
    long[] vibrationPattern -> i
    java.lang.String description -> d
com.unity.androidnotifications.UnityNotificationBackgroundThread -> com.unity.androidnotifications.b:
    java.util.concurrent.LinkedTransferQueue mTasks -> a
    com.unity.androidnotifications.UnityNotificationManager mManager -> c
    java.util.concurrent.ConcurrentHashMap mScheduledNotifications -> b
    int mTasksSinceHousekeeping -> d
    void access$100(com.unity.androidnotifications.UnityNotificationBackgroundThread,java.util.Set) -> a
    void enqueueCancelAllNotifications() -> b
    void enqueueCancelNotification(int) -> c
    void enqueueHousekeeping() -> d
    void enqueueNotification(int,android.app.Notification$Builder,boolean,boolean) -> e
    boolean executeTask(com.unity.androidnotifications.UnityNotificationManager,com.unity.androidnotifications.UnityNotificationBackgroundThread$Task,java.util.concurrent.ConcurrentHashMap) -> f
    void loadNotifications() -> g
    void performHousekeeping(java.util.Set) -> h
com.unity.androidnotifications.UnityNotificationBackgroundThread$1 -> com.unity.androidnotifications.b$a:
com.unity.androidnotifications.UnityNotificationBackgroundThread$CancelAllNotificationsTask -> com.unity.androidnotifications.b$b:
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$CancelNotificationTask -> com.unity.androidnotifications.b$c:
    int notificationId -> a
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$HousekeepingTask -> com.unity.androidnotifications.b$d:
    com.unity.androidnotifications.UnityNotificationBackgroundThread thread -> a
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$ScheduleNotificationTask -> com.unity.androidnotifications.b$e:
    android.app.Notification$Builder notificationBuilder -> b
    boolean isCustomized -> c
    int notificationId -> a
    boolean isNew -> d
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationBackgroundThread$Task -> com.unity.androidnotifications.b$f:
    boolean run(com.unity.androidnotifications.UnityNotificationManager,java.util.concurrent.ConcurrentHashMap) -> a
com.unity.androidnotifications.UnityNotificationManager -> com.unity.androidnotifications.UnityNotificationManager:
    android.content.Context mContext -> a
    java.util.concurrent.ConcurrentHashMap mScheduledNotifications -> g
    com.unity.androidnotifications.UnityNotificationBackgroundThread mBackgroundThread -> d
    java.util.Random mRandom -> e
    int mExactSchedulingSetting -> i
    com.unity.androidnotifications.UnityNotificationManager mUnityNotificationManager -> j
    java.util.HashSet mVisibleNotifications -> f
    com.unity.androidnotifications.NotificationCallback mNotificationCallback -> h
    android.app.Activity mActivity -> b
    java.lang.Class mOpenActivity -> c
    java.util.List loadSavedNotifications() -> A
    com.unity.androidnotifications.NotificationChannelWrapper notificationChannelToWrapper(java.lang.Object) -> B
    void notify(int,android.app.Notification$Builder) -> C
    void notify(int,android.app.Notification) -> D
    void performNotificationHousekeeping(java.util.Set) -> E
    void performNotificationScheduling(int,android.app.Notification$Builder,boolean) -> F
    void saveNotification(android.app.Notification,boolean) -> G
    void saveScheduledNotificationIDs(java.util.Set) -> H
    void scheduleAlarmWithNotification(android.app.Notification$Builder) -> I
    void scheduleAlarmWithNotification(android.app.Notification$Builder,android.content.Intent,long) -> J
    void scheduleNotificationIntentAlarm(long,long,android.app.PendingIntent) -> K
    void setupBigPictureStyle(android.app.Notification$Builder) -> L
    void showNotification(android.content.Intent) -> M
    void $r8$lambda$31g61T1kLvuqLLmef0EK2LLBihk(com.unity.androidnotifications.UnityNotificationManager,java.lang.Integer) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.app.Notification buildNotificationForSending(java.lang.Class,android.app.Notification$Builder) -> b
    android.content.Intent buildNotificationIntent() -> c
    boolean canScheduleExactAlarms(android.app.AlarmManager) -> d
    void cancelPendingNotificationIntent(int) -> e
    void deleteExpiredNotificationIntent(java.lang.String) -> f
    android.app.Notification$Builder deserializeNotificationBuilder(java.lang.Integer) -> g
    void finalizeNotificationForDisplay(android.app.Notification$Builder) -> h
    java.util.Set findInvalidNotificationIds(java.util.Set) -> i
    int generateUniqueId() -> j
    android.app.PendingIntent getActivityPendingIntent(int,android.content.Intent,int) -> k
    android.os.Bundle getAppMetadata() -> l
    android.app.PendingIntent getBroadcastPendingIntent(int,android.content.Intent,int) -> m
    java.lang.Object getIcon(java.lang.String) -> n
    java.lang.Object getIconForUri(java.lang.String) -> o
    java.lang.Object getIconFromResources(java.lang.String,boolean) -> p
    com.unity.androidnotifications.UnityNotificationManager getNotificationManagerImpl(android.content.Context) -> q
    java.lang.Object getNotificationOrBuilderForIntent(android.content.Intent) -> r
    java.lang.Object getNotificationOrIdForIntent(android.content.Intent) -> s
    java.util.Set getScheduledNotificationIDs() -> t
    java.lang.String getSharedPrefsNameByChannelId(java.lang.String) -> u
    java.lang.String getSharedPrefsNameByNotificationId(java.lang.String) -> v
    void initialize(android.app.Activity,com.unity.androidnotifications.NotificationCallback) -> w
    boolean isInForeground() -> x
    void lambda$showNotification$0(java.lang.Integer) -> y
    android.graphics.Bitmap loadBitmap(java.lang.String) -> z
com.unity.androidnotifications.UnityNotificationManager$$ExternalSyntheticLambda0 -> com.unity.androidnotifications.c:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    com.unity.androidnotifications.UnityNotificationManager com.unity.androidnotifications.UnityNotificationManager$$InternalSyntheticLambda$0$eb70669fcf3754b8dac60b386ffa7d72872eee41b6ff2dbabb893dfb90201c28$0.f$0 -> a
    java.lang.Integer com.unity.androidnotifications.UnityNotificationManager$$InternalSyntheticLambda$0$eb70669fcf3754b8dac60b386ffa7d72872eee41b6ff2dbabb893dfb90201c28$0.f$1 -> b
    void com.unity.androidnotifications.UnityNotificationManager$$InternalSyntheticLambda$0$eb70669fcf3754b8dac60b386ffa7d72872eee41b6ff2dbabb893dfb90201c28$0.<init>(com.unity.androidnotifications.UnityNotificationManager,java.lang.Integer) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    void com.unity.androidnotifications.UnityNotificationManager$$InternalSyntheticLambda$0$eb70669fcf3754b8dac60b386ffa7d72872eee41b6ff2dbabb893dfb90201c28$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
com.unity.androidnotifications.UnityNotificationRestartReceiver -> com.unity.androidnotifications.UnityNotificationRestartReceiver:
    void $r8$lambda$CMERdJiZpU2EFaCgKFeL3HBzZ5Y(android.content.Context) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void lambda$onReceive$0(android.content.Context) -> b
    boolean rescheduleNotification(com.unity.androidnotifications.UnityNotificationManager,java.util.Date,android.app.Notification$Builder) -> c
    void rescheduleSavedNotifications(android.content.Context) -> d
com.unity.androidnotifications.UnityNotificationRestartReceiver$$ExternalSyntheticLambda0 -> com.unity.androidnotifications.d:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    android.content.Context com.unity.androidnotifications.UnityNotificationRestartReceiver$$InternalSyntheticLambda$0$b2bdf4fc01afeb1595301390e4b9fd68eca91ae68ee1b1e1f36d6cb6e856ef0a$0.f$0 -> a
    void com.unity.androidnotifications.UnityNotificationRestartReceiver$$InternalSyntheticLambda$0$b2bdf4fc01afeb1595301390e4b9fd68eca91ae68ee1b1e1f36d6cb6e856ef0a$0.<init>(android.content.Context) -> <init>
      # {"id":"com.android.tools.r8.synthesized"}
    void com.unity.androidnotifications.UnityNotificationRestartReceiver$$InternalSyntheticLambda$0$b2bdf4fc01afeb1595301390e4b9fd68eca91ae68ee1b1e1f36d6cb6e856ef0a$0.run() -> run
      # {"id":"com.android.tools.r8.synthesized"}
com.unity.androidnotifications.UnityNotificationUtilities -> com.unity.androidnotifications.e:
    byte[] UNITY_MAGIC_NUMBER_PARCELLED -> b
    byte[] UNITY_MAGIC_NUMBER -> a
    java.lang.Object deserializeNotification(android.content.Context,android.content.SharedPreferences) -> a
    java.lang.Object deserializeNotification(android.content.Context,byte[]) -> b
    android.app.Notification$Builder deserializeNotificationCustom(android.content.Context,java.io.DataInputStream) -> c
    android.app.Notification deserializeNotificationParcelable(java.io.DataInputStream) -> d
    android.os.Parcelable deserializeParcelable(java.io.DataInputStream) -> e
    java.lang.String deserializeString(java.io.DataInputStream) -> f
    android.app.Notification$Builder deserializedFromOldIntent(android.content.Context,byte[]) -> g
    int findResourceIdInContextByName(android.content.Context,java.lang.String) -> h
    java.lang.Class getOpenAppActivity(android.content.Context) -> i
    boolean isUnityActivity(java.lang.String) -> j
    boolean readAndCheckMagicNumber(java.io.DataInputStream,byte[]) -> k
    android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification) -> l
    android.app.Notification$Builder recoverBuilderCustom(android.content.Context,android.app.Notification) -> m
    void serializeNotification(android.content.SharedPreferences,android.app.Notification,boolean) -> n
    boolean serializeNotificationCustom(android.app.Notification,java.io.DataOutputStream) -> o
    boolean serializeNotificationParcel(android.content.Intent,java.io.DataOutputStream) -> p
    byte[] serializeParcelable(android.os.Parcelable) -> q
    void serializeString(java.io.DataOutputStream,java.lang.String) -> r
com.unity3d.JavaPluginPreloader -> b.a:
    int $r8$clinit -> a
    void loadJavaClass(java.lang.String) -> a
com.unity3d.adaptiveperformance.samsung.GameLoadBooster -> c.a:
    com.samsung.android.gamesdk.GameSDKManager manager -> a
    java.lang.Boolean startupBoostEnabled -> b
    boolean checkStartupBoostEnabled() -> a
    boolean enableBoost() -> b
    boolean isStartupBoostEnabled() -> c
com.unity3d.player.ApplicationExitInfoBase$$ExternalSyntheticBackport0 -> com.unity3d.player.i0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
    int com.unity3d.player.ApplicationExitInfoBase$$InternalSyntheticBackport$0$febb6ed641eed2b2ec0027f7c835c2fb97e07a081d62ea292e5255df42c0826d$0.m(long) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.D -> com.unity3d.player.D:
    int -$$Nest$sfgeta() -> a
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sfgetb() -> b
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sfgetc() -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.E -> com.unity3d.player.E:
    android.content.Context -$$Nest$fgeta(com.unity3d.player.E) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.UnityPlayerForActivityOrService -$$Nest$fgetb(com.unity3d.player.E) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.String -$$Nest$ma(com.unity3d.player.E) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.E,java.lang.String,boolean) -> d
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.HFPStatus -> com.unity3d.player.HFPStatus:
    boolean -$$Nest$fgetc(com.unity3d.player.HFPStatus) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.media.AudioManager -$$Nest$fgetd(com.unity3d.player.HFPStatus) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgete(com.unity3d.player.HFPStatus) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fpute(com.unity3d.player.HFPStatus,boolean) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputf(com.unity3d.player.HFPStatus,com.unity3d.player.HFPStatus$a) -> e
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.N -> com.unity3d.player.N:
    com.unity3d.player.UnityPlayer -$$Nest$fgeta(com.unity3d.player.N) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgetb(com.unity3d.player.N) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputb(com.unity3d.player.N,boolean) -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.Q -> com.unity3d.player.Q:
    com.unity3d.player.a -$$Nest$fgeta(com.unity3d.player.Q) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.UnityPlayerForActivityOrService -$$Nest$fgetb(com.unity3d.player.Q) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.z -$$Nest$fgetc(com.unity3d.player.Q) -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.ReflectionHelper -> com.unity3d.player.ReflectionHelper:
    long -$$Nest$sfgetb() -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smnativeProxyFinalize(long) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$smnativeProxyInvoke(long,java.lang.String,java.lang.Object[]) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smnativeProxyLogJNIInvokeException(long) -> d
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.ReflectionHelper$a -> com.unity3d.player.ReflectionHelper$a:
    void -$$Nest$fputd(com.unity3d.player.ReflectionHelper$a,long) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fpute(com.unity3d.player.ReflectionHelper$a,boolean) -> b
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.ReflectionHelper$b -> com.unity3d.player.ReflectionHelper$b:
    int -$$Nest$fgetd(com.unity3d.player.ReflectionHelper$b) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityAccessibilityDelegate -> com.unity3d.player.UnityAccessibilityDelegate:
    com.unity3d.player.UnityPlayer -$$Nest$fgeta(com.unity3d.player.UnityAccessibilityDelegate) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.view.View -$$Nest$fgetb(com.unity3d.player.UnityAccessibilityDelegate) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    android.view.accessibility.AccessibilityManager -$$Nest$fgetc(com.unity3d.player.UnityAccessibilityDelegate) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgete(com.unity3d.player.UnityAccessibilityDelegate) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputd(com.unity3d.player.UnityAccessibilityDelegate,com.unity3d.player.UnityAccessibilityDelegate$c) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fpute(com.unity3d.player.UnityAccessibilityDelegate,int) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.UnityAccessibilityDelegate,int) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    int[] -$$Nest$smgetRootNodeIds() -> h
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$smhitTest(float,float) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$smisClickable(int) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$smperformClickAction(int) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smperformOnFocusChanged(int,boolean) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$smpopulateNodeInfo(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smsendElementFocusedNotification(int) -> n
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smsendScreenReaderStatusChangedNotification(boolean) -> o
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smsetAccessibilityManagerIsEnabled(boolean) -> p
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smsetAccessibilityManagerIsTouchExplorationEnabled(boolean) -> q
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer -> com.unity3d.player.UnityPlayer:
    int -$$Nest$fgetmInitialScreenOrientation(com.unity3d.player.UnityPlayer) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.F -$$Nest$fgetm_SplashScreen(com.unity3d.player.UnityPlayer) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputmVideoPlayerProxy(com.unity3d.player.UnityPlayer,com.unity3d.player.h0) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputm_SplashScreen(com.unity3d.player.UnityPlayer,com.unity3d.player.F) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$minvokeOnMainThread(com.unity3d.player.UnityPlayer,com.unity3d.player.UnityPlayer$l) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$mnativeIsAutorotationOn(com.unity3d.player.UnityPlayer) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeMuteMasterAudio(com.unity3d.player.UnityPlayer,boolean) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$smnativeSetLaunchURL(java.lang.String) -> h
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$j -> com.unity3d.player.UnityPlayer$j:
    long -$$Nest$fgeta(com.unity3d.player.UnityPlayer$j) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayer$k-IA -> com.unity3d.player.j0:
# {"id":"sourceFile","fileName":"R8$$SyntheticClass"}
# {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayerForActivityOrService -> com.unity3d.player.UnityPlayerForActivityOrService:
    boolean -$$Nest$fgetmMainDisplayOverride(com.unity3d.player.UnityPlayerForActivityOrService) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.E -$$Nest$fgetmSoftInputDialog(com.unity3d.player.UnityPlayerForActivityOrService) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputmSoftInputDialog(com.unity3d.player.UnityPlayerForActivityOrService,com.unity3d.player.E) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeOnApplyWindowInsets(com.unity3d.player.UnityPlayerForActivityOrService,android.view.WindowInsets) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$mnativePause(com.unity3d.player.UnityPlayerForActivityOrService) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeRecreateGfxState(com.unity3d.player.UnityPlayerForActivityOrService,int,android.view.Surface) -> n
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeReportKeyboardConfigChanged(com.unity3d.player.UnityPlayerForActivityOrService) -> o
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeResume(com.unity3d.player.UnityPlayerForActivityOrService) -> p
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSendSurfaceChangedEvent(com.unity3d.player.UnityPlayerForActivityOrService) -> q
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputArea(com.unity3d.player.UnityPlayerForActivityOrService,int,int,int,int) -> r
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputSelection(com.unity3d.player.UnityPlayerForActivityOrService,int,int) -> s
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetInputString(com.unity3d.player.UnityPlayerForActivityOrService,java.lang.String) -> t
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSetKeyboardIsVisible(com.unity3d.player.UnityPlayerForActivityOrService,boolean) -> u
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputCanceled(com.unity3d.player.UnityPlayerForActivityOrService) -> v
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputClosed(com.unity3d.player.UnityPlayerForActivityOrService) -> w
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeSoftInputLostFocus(com.unity3d.player.UnityPlayerForActivityOrService) -> x
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mqueueDestroy(com.unity3d.player.UnityPlayerForActivityOrService) -> y
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.UnityPlayerForGameActivity -> com.unity3d.player.UnityPlayerForGameActivity:
    void -$$Nest$mnativeOrientationChanged(com.unity3d.player.UnityPlayerForGameActivity,int,int) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mnativeUnityPlayerSetRunning(com.unity3d.player.UnityPlayerForGameActivity,boolean) -> j
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.V -> com.unity3d.player.V:
    com.unity3d.player.UnityPlayerForActivityOrService -$$Nest$fgeta(com.unity3d.player.V) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.os.Handler -$$Nest$fgetb(com.unity3d.player.V) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgetc(com.unity3d.player.V) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgetd(com.unity3d.player.V) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.T -$$Nest$fgete(com.unity3d.player.V) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgetf(com.unity3d.player.V) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgetg(com.unity3d.player.V) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgeth(com.unity3d.player.V) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$fgeti(com.unity3d.player.V) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputc(com.unity3d.player.V,boolean) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputd(com.unity3d.player.V,boolean) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fpute(com.unity3d.player.V,com.unity3d.player.T) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputf(com.unity3d.player.V,int) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputi(com.unity3d.player.V,int) -> n
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.Z -> com.unity3d.player.Z:
    void -$$Nest$fputb(com.unity3d.player.Z,boolean) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.a.a -> d.a:
com.unity3d.player.a.b -> d.b:
com.unity3d.player.a.c -> d.c:
    void -$$Nest$fputb(com.unity3d.player.a.c,int) -> c
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.c -> com.unity3d.player.c:
    java.util.HashSet -$$Nest$fgeta(com.unity3d.player.c) -> a
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.h0 -> com.unity3d.player.h0:
    com.unity3d.player.UnityPlayer -$$Nest$fgeta(com.unity3d.player.h0) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.content.Context -$$Nest$fgetb(com.unity3d.player.h0) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.Semaphore -$$Nest$fgetd(com.unity3d.player.h0) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.locks.Lock -$$Nest$fgete(com.unity3d.player.h0) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.a0 -$$Nest$fgetf(com.unity3d.player.h0) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    boolean -$$Nest$fgeti(com.unity3d.player.h0) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputf(com.unity3d.player.h0,com.unity3d.player.a0) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputg(com.unity3d.player.h0,int) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputi(com.unity3d.player.h0,boolean) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.h0) -> j
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.i -> com.unity3d.player.i:
    com.unity3d.player.UnityPlayer -$$Nest$fgeta(com.unity3d.player.i) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    com.google.android.play.core.assetpacks.AssetPackManager -$$Nest$fgetb(com.unity3d.player.i) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.HashSet -$$Nest$fgetc(com.unity3d.player.i) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$fgetd(com.unity3d.player.i) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputd(com.unity3d.player.i,java.lang.Object) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    com.unity3d.player.i -$$Nest$sfgete() -> f
      # {"id":"com.android.tools.r8.synthesized"}
    int -$$Nest$sma(java.lang.Throwable) -> g
      # {"id":"com.android.tools.r8.synthesized"}
com.unity3d.player.s -> com.unity3d.player.s:
    com.unity3d.player.a.a -$$Nest$fgeta(com.unity3d.player.s) -> a
      # {"id":"com.android.tools.r8.synthesized"}
    android.hardware.camera2.CameraDevice -$$Nest$fgetb(com.unity3d.player.s) -> b
      # {"id":"com.android.tools.r8.synthesized"}
    android.util.Range -$$Nest$fgetn(com.unity3d.player.s) -> c
      # {"id":"com.android.tools.r8.synthesized"}
    android.media.Image -$$Nest$fgetp(com.unity3d.player.s) -> d
      # {"id":"com.android.tools.r8.synthesized"}
    android.hardware.camera2.CaptureRequest$Builder -$$Nest$fgetq(com.unity3d.player.s) -> e
      # {"id":"com.android.tools.r8.synthesized"}
    java.lang.Object -$$Nest$fgets(com.unity3d.player.s) -> f
      # {"id":"com.android.tools.r8.synthesized"}
    android.view.Surface -$$Nest$fgetv(com.unity3d.player.s) -> g
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputb(com.unity3d.player.s,android.hardware.camera2.CameraDevice) -> h
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputp(com.unity3d.player.s,android.media.Image) -> i
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputq(com.unity3d.player.s,android.hardware.camera2.CaptureRequest$Builder) -> j
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$fputr(com.unity3d.player.s,android.hardware.camera2.CameraCaptureSession) -> k
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.s,android.hardware.camera2.CameraDevice) -> l
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$ma(com.unity3d.player.s,java.lang.Object) -> m
      # {"id":"com.android.tools.r8.synthesized"}
    void -$$Nest$mf(com.unity3d.player.s) -> n
      # {"id":"com.android.tools.r8.synthesized"}
    java.util.concurrent.Semaphore -$$Nest$sfgetD() -> o
      # {"id":"com.android.tools.r8.synthesized"}
